<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>bobo的鬼屋</title>
  <icon>https://www.gravatar.com/avatar/bf7dad1a28723440e66577cf9bf349f6</icon>
  <subtitle>我单手握着方向盘没跟谁比赛</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="//blog.qinbo.top/"/>
  <updated>2020-05-27T07:02:46.144Z</updated>
  <id>//blog.qinbo.top/</id>
  
  <author>
    <name>bobo</name>
    <email>qinbo1022@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>github图床配置</title>
    <link href="//blog.qinbo.top/2020/05/27/github%E5%9B%BE%E5%BA%8A%E9%85%8D%E7%BD%AE/"/>
    <id>//blog.qinbo.top/2020/05/27/github图床配置/</id>
    <published>2020-05-27T06:08:33.000Z</published>
    <updated>2020-05-27T07:02:46.144Z</updated>
    
    <content type="html"><![CDATA[<p>如何用github搭建一个免费的图片存储仓库？</p><a id="more"></a><p>如果你有以下需求，用github搭建仓库可以帮你解决：</p><ul><li>用markdown写文章时，图片引用麻烦，希望能直接引用网络地址</li><li>希望能够随手存喜欢的图片</li><li>……</li></ul><blockquote><p>工欲善其事，必先利其器</p></blockquote><h3 id="1-架构"><a href="#1-架构" class="headerlink" title="1.架构"></a>1.架构</h3><p>使用Github配合PicGo，实现一键存图，一键返回网络地址</p><p>在这个过程中，github充当存储的角色，picgo实现自动化</p><h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h3><p>我们站在巨人的肩膀上，两个工具都是已有的并且免费的，向前辈致敬！</p><h4 id="github配置"><a href="#github配置" class="headerlink" title="github配置"></a>github配置</h4><p>1.创建仓库（不用教吧）</p><p>2.生成token，token我理解是你用来和你自己的github仓库交互会话id，这个id有对应的权限，并且不会过期，相当于开的后门，以下是获取token的渠道【 账户/Settings/Developer settings/Personal access tokens 】</p><p><img src="https://raw.githubusercontent.com/qinbo1022/image_online/master/20200527143646.png" alt="获取token"></p><p>配置库权限，这里都勾上</p><p><img src="https://raw.githubusercontent.com/qinbo1022/image_online/master/20200527143948.png" alt="只需勾选库相关的权限即可"></p><p>只勾选库相关的权限，下一步就会获得到一个token，到这里github这一块就结束了</p><h4 id="picgo配置"><a href="#picgo配置" class="headerlink" title="picgo配置"></a>picgo配置</h4><p>1.下载一个picgo</p><p>2.配置图床地址</p><p><img src="https://raw.githubusercontent.com/qinbo1022/image_online/master/20200527144745.png" alt="配置地址"></p><p>3.配置快捷键</p><p><img src="https://raw.githubusercontent.com/qinbo1022/image_online/master/20200527150119.png" alt="快捷键设置"></p><p>也可以不配置，默认ctrl+shift+p</p><p>4.开启【上传后自动上传url到剪切板】</p><p>至此picgo的配置也结束了。</p><h3 id="3-使用"><a href="#3-使用" class="headerlink" title="3.使用"></a>3.使用</h3><p>工具已经配置好了，如何使用呢</p><p>1.截图，用qq微信或者自带的截图工具printScr都可以</p><p>2.上传，按下picgo的快捷键ctrl+shift+p一键上传</p><p>3.粘贴，ctrl+v不用教吧，粘贴出来的格式取决于你picgo配置的</p><p><img src="https://raw.githubusercontent.com/qinbo1022/image_online/master/20200527145448.png" alt="链接格式"></p><p>好了，教程就到这，好好利用，生命又多出一部分。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如何用github搭建一个免费的图片存储仓库？&lt;/p&gt;
    
    </summary>
    
    
      <category term="图床" scheme="//blog.qinbo.top/tags/%E5%9B%BE%E5%BA%8A/"/>
    
  </entry>
  
  <entry>
    <title>kafka安装及使用</title>
    <link href="//blog.qinbo.top/2020/05/20/kafka%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    <id>//blog.qinbo.top/2020/05/20/kafka安装及使用/</id>
    <published>2020-05-20T05:58:22.000Z</published>
    <updated>2020-05-27T06:05:32.433Z</updated>
    
    <content type="html"><![CDATA[<p>单机kafka的部署过程记录。</p><a id="more"></a><h3 id="一-下载"><a href="#一-下载" class="headerlink" title="一.下载"></a>一.下载</h3><p>本篇使用版本为</p><p>kafka_2.11-2.1.0</p><p>zookeeper-3.4.14</p><p>自行官网下载</p><h3 id="二-配置"><a href="#二-配置" class="headerlink" title="二.配置"></a>二.配置</h3><h4 id="zookeeper配置"><a href="#zookeeper配置" class="headerlink" title="zookeeper配置"></a>zookeeper配置</h4><p>zk是kafka的注册中心，先配置zk</p><h5 id="1-修改zoo-cfg（zoo-simple-cfg）"><a href="#1-修改zoo-cfg（zoo-simple-cfg）" class="headerlink" title="1. 修改zoo.cfg（zoo.simple.cfg）"></a>1. 修改zoo.cfg（zoo.simple.cfg）</h5><p>a）修改默认接口2181为2180，避免冲突</p><p>b）修改dataDir为自定义目录，此文件夹用于存放数据文件</p><p>c）新建dataLogDir为自定义目录 数据文件日志</p><p><strong>ps：必须填写绝对路径</strong></p><p><img src="https://raw.githubusercontent.com/qinbo1022/image_online/master/20200520195203.png" alt="test"></p><h5 id="2-启动zk并查看其状态"><a href="#2-启动zk并查看其状态" class="headerlink" title="2.启动zk并查看其状态"></a>2.启动zk并查看其状态</h5><p>进入bin目录，执行命令启动</p><blockquote><p>./zkServer.sh start</p></blockquote><p>启动成功后使用</p><blockquote><p>./zkServer.sh status</p></blockquote><p>查看启动状态</p><p><img src="https://raw.githubusercontent.com/qinbo1022/image_online/master/20200520195252.png" alt></p><h4 id="kafka配置"><a href="#kafka配置" class="headerlink" title="kafka配置"></a>kafka配置</h4><h5 id="1-配置server-properties"><a href="#1-配置server-properties" class="headerlink" title="1.配置server.properties"></a>1.配置server.properties</h5><p>a）创建数据存放目录</p><p>b）修改日志存放目录log.dirs</p><p>c）修改zookeeper的连接地址</p><p>d）修改默认端口端口</p><p><img src="https://raw.githubusercontent.com/qinbo1022/image_online/master/20200520195452.png" alt></p><p><img src="https://raw.githubusercontent.com/qinbo1022/image_online/master/20200520195512.png" alt></p><p><img src="https://raw.githubusercontent.com/qinbo1022/image_online/master/20200520195532.png" alt></p><h5 id="2-配置producer-properties"><a href="#2-配置producer-properties" class="headerlink" title="2.配置producer.properties"></a>2.配置producer.properties</h5><p><img src="https://raw.githubusercontent.com/qinbo1022/image_online/master/20200520195422.png" alt></p><h5 id="3-配置zookeeper-properties"><a href="#3-配置zookeeper-properties" class="headerlink" title="3.配置zookeeper.properties"></a>3.配置zookeeper.properties</h5><p><img src="https://raw.githubusercontent.com/qinbo1022/image_online/master/20200520195326.png" alt></p><h5 id="4-启动"><a href="#4-启动" class="headerlink" title="4.启动"></a>4.启动</h5><blockquote><p>bin/kafka-server-start.sh config/server.properties</p></blockquote><p>执行启动命令，指定配置文件【这一步建议放到tmux或nohup执行】</p><h3 id="三-测试"><a href="#三-测试" class="headerlink" title="三.测试"></a>三.测试</h3><h5 id="1-创建topic"><a href="#1-创建topic" class="headerlink" title="1.创建topic"></a>1.创建topic</h5><blockquote><p>bin/kafka-topics.sh –create –zookeeper localhost:2180 –replication-factor 1 –partitions 8 –topic test_topic</p></blockquote><p>指定zk地址，副本数，分区数，topic名称</p><h5 id="2-查看topic"><a href="#2-查看topic" class="headerlink" title="2.查看topic"></a>2.查看topic</h5><blockquote><p>bin/kafka-topics.sh –list –zookeeper 127.0.0.1:2180</p></blockquote><h5 id="3-启动一个控制台生产者和控制台消费者验证是否正常使用"><a href="#3-启动一个控制台生产者和控制台消费者验证是否正常使用" class="headerlink" title="3.启动一个控制台生产者和控制台消费者验证是否正常使用"></a>3.启动一个控制台生产者和控制台消费者验证是否正常使用</h5><ul><li><p>控制台生产者</p><blockquote><p>bin/kafka-console-producer.sh –broker-list 127.0.0.1:9090 –topic test_topic</p></blockquote></li><li><p>控制台消费者</p><blockquote><p>bin/kafka-console-consumer.sh –bootstrap-server 127.0.0.1:9090 –topic test_topic –from-beginning</p></blockquote></li></ul><h3 id="四-其他命令"><a href="#四-其他命令" class="headerlink" title="四.其他命令"></a>四.其他命令</h3><p>1.修改分区数</p><blockquote><p>./bin/kafka-topics.sh –alter –zookeeper 127.0.0.1:2180 –topic test_topic –partitions 8</p></blockquote><p>2.查看分区</p><blockquote><p>./bin/kafka-topics.sh –describe –zookeeper 127.0.0.1:2180 –topic test_topic</p></blockquote><p><strong>提高分区数是提高并发的有效方式</strong></p><p>kafka_2.11-2.1.0</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;单机kafka的部署过程记录。&lt;/p&gt;
    
    </summary>
    
    
      <category term="kafka" scheme="//blog.qinbo.top/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>hexo的基本操作</title>
    <link href="//blog.qinbo.top/2019/11/11/hexo%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>//blog.qinbo.top/2019/11/11/hexo基本操作/</id>
    <published>2019-11-11T09:49:50.000Z</published>
    <updated>2020-05-27T06:04:06.629Z</updated>
    
    <content type="html"><![CDATA[<p> hexo是一个很简洁的博客框架，拥有很多主题，很适合用作个人博客，在此记录一下基本用法。</p><p>官方文档地址： <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/</a> </p><a id="more"></a> <h3 id="1-创建一篇新文章"><a href="#1-创建一篇新文章" class="headerlink" title="1.创建一篇新文章"></a>1.创建一篇新文章</h3><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo <span class="keyword">new</span> [layout] &lt;<span class="built_in">title</span>&gt;</span><br></pre></td></tr></table></figure><hr><p>参数</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">layout</span>： </span><br><span class="line">    post：要发表的文章，保存在<span class="keyword">source</span>/_posts目录下</span><br><span class="line">    page：要发表的文章，保存在<span class="keyword">source</span>下</span><br><span class="line">    draft：保存为草稿，保存在<span class="keyword">source</span>/_drafts下，草稿不会被发布,使用命令</span><br><span class="line">        $ hexo publish [<span class="keyword">layout</span>] &lt;title&gt;</span><br><span class="line">    可以发布&lt;title&gt;这份草稿</span><br><span class="line">title：文章标题</span><br></pre></td></tr></table></figure><h3 id="2-文章参数设置"><a href="#2-文章参数设置" class="headerlink" title="2.文章参数设置"></a>2.文章参数设置</h3><p><strong>Front-matter</strong></p><p>Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量，举例来说：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">Hello</span> <span class="string">World</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2013</span><span class="string">/7/13</span> <span class="number">20</span><span class="string">:46:25</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:center">描述</th><th style="text-align:right">默认值</th></tr></thead><tbody><tr><td style="text-align:left">layout</td><td style="text-align:center">布局</td><td style="text-align:right">post</td></tr><tr><td style="text-align:left">title</td><td style="text-align:center">标题</td><td style="text-align:right"></td></tr><tr><td style="text-align:left">date</td><td style="text-align:center">建立日期</td><td style="text-align:right">文件建立日期</td></tr><tr><td style="text-align:left">updated</td><td style="text-align:center">更新日期</td><td style="text-align:right">文件更新日期</td></tr><tr><td style="text-align:left">comments</td><td style="text-align:center">开启文章的评论功能</td><td style="text-align:right">true</td></tr><tr><td style="text-align:left">tags</td><td style="text-align:center">标签（不适用于分页）</td><td style="text-align:right"></td></tr><tr><td style="text-align:left">categories</td><td style="text-align:center">分类（不适用于分页）</td><td style="text-align:right"></td></tr><tr><td style="text-align:left">permalink</td><td style="text-align:center">覆盖文章网址</td></tr></tbody></table><p><strong>分类和标签</strong></p><p>语法：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">categories: "test"</span><br><span class="line"><span class="keyword">tags:</span></span><br><span class="line">- PS3</span><br><span class="line">- Games</span><br></pre></td></tr></table></figure><p><strong>JSON Front-matter</strong></p><p>除了 YAML 外，也可以使用 JSON 来编写 Front-matter，只要将 — 代换成 ;;; 即可。如：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"title"</span>: <span class="string">"Hello World"</span>,</span><br><span class="line"><span class="string">"date"</span>: <span class="string">"2013/7/13 20:46:25"</span></span><br><span class="line"><span class="comment">;;;</span></span><br></pre></td></tr></table></figure><h3 id="3-引用块"><a href="#3-引用块" class="headerlink" title="3.引用块"></a>3.引用块</h3><p><a href="https://hexo.io/zh-cn/docs/tag-plugins" target="_blank" rel="noopener">查看官方说明</a></p><h3 id="4-发布"><a href="#4-发布" class="headerlink" title="4.发布"></a>4.发布</h3><p><strong>1.生成静态文件</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo <span class="keyword">generate</span></span><br></pre></td></tr></table></figure><p>简写</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo g</span><br></pre></td></tr></table></figure><p><strong>2.清理生成的文件（防止缓存）</strong></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo clean</span><br></pre></td></tr></table></figure><p><strong>3.启动服务</strong></p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo <span class="keyword">server</span></span><br></pre></td></tr></table></figure><p>默认启动端口为4000，访问地址<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></p><p>参数：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-p, <span class="comment">--port      重设端口</span></span><br><span class="line">-s, <span class="comment">--static 只使用静态文件</span></span><br><span class="line">-l, <span class="comment">--log      启动日记记录，使用覆盖记录格式</span></span><br></pre></td></tr></table></figure><p>也可简写为：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo s</span><br></pre></td></tr></table></figure><p><strong>4. 发布到网站</strong></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo deploy</span><br></pre></td></tr></table></figure><p>简写：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo d</span><br></pre></td></tr></table></figure><h3 id="5-查看基本信息"><a href="#5-查看基本信息" class="headerlink" title="5.查看基本信息"></a>5.查看基本信息</h3><p><strong>1.list</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo <span class="built_in">list</span> &lt;type&gt;</span><br></pre></td></tr></table></figure><p>type可选参数：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">page,</span> post, route, tag, category</span><br></pre></td></tr></table></figure><p><strong>2.version</strong></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo <span class="built_in">version</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; hexo是一个很简洁的博客框架，拥有很多主题，很适合用作个人博客，在此记录一下基本用法。&lt;/p&gt;
&lt;p&gt;官方文档地址： &lt;a href=&quot;https://hexo.io/zh-cn/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://hexo.io/zh-cn/docs/&lt;/a&gt; &lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="//blog.qinbo.top/tags/hexo/"/>
    
  </entry>
  
</feed>
